(1) Dictionary

As of Python version 3.7, dictionaries are ordered. In Python 3.6 and earlier, dictionaries are unordered.

A dictionary as a set of key: value pairs, with the requirement that the keys are unique (within one dictionary).
dictionart = {key:value, ...}

(2) Python String index()
The index() method returns the index of a substring inside the string (if found). If the substring is not found, it raises an exception.

index() Syntax
It's syntax is:

str.index(sub[, start[, end]] )
index() Parameters
The index() method takes three parameters:

sub - substring to be searched in the string str.
start and end(optional) - substring is searched within str[start:end]

index() Return Value
If substring exists inside the string, it returns the lowest index in the string where substring is found.
If substring doesn't exist inside the string, it raises a ValueError exception.
The index() method is similar to the find() method for strings.

The only difference is that find() method returns -1 if the substring is not found, whereas index() throws an exception.

(3)
IndexError: string index out of range

values = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}
class Solution:
    def romanToInt(self, s: str) -> int:
        total = 0
        i = 0
        while (i < len(s)):
            if values[s[i]] < values[s[i + 1]] and i + 1 < len(s):
                total += values[s[i + 1]] - values[s[i]]
                i += 2
            else:
                total += values[s[i]]
                i += 1
        return total
       
line 37 will throw an Error: string index out of range
if values[s[i]] < values[s[i + 1]] and i + 1 < len(s):
should be 
if i + 1 < len(s) and values[s[i]] < values[s[i + 1]]:

(4)
The break Statement:
The break statement in Python terminates the current loop and resumes execution at the next statement, just like the traditional break found in C.
The most common use for break is when some external condition is triggered requiring a hasty exit from a loop. The break statement can be used in both while and for loops.

The continue Statement:
The continue statement in Python returns the control to the beginning of the while loop. The continue statement rejects all the remaining statements in the current iteration of the loop and moves the control back to the top of the loop.
The continue statement can be used in both while and for loops.

The else Statement Used with Loops
Python supports to have an else statement associated with a loop statements.
If the else statement is used with a for loop, the else statement is executed when the loop has exhausted iterating the list.
If the else statement is used with a while loop, the else statement is executed when the condition becomes false.

Example:
The following example illustrates the combination of an else statement with a for statement that searches for prime numbers from 10 through 20.
#!/usr/bin/python

for num in range(10,20):  #to iterate between 10 to 20
   for i in range(2,num): #to iterate on the factors of the number
      if num%i == 0:      #to determine the first factor
         j=num/i #to calculate the second factor
         print '%d equals %d * %d' % (num,i,j)
         break #to move to the next number, the #first FOR
   else:        # else part of the loop
      print num, 'is a prime number'

This will produce following result:
10 equals 2 * 5
11 is a prime number
12 equals 2 * 6
13 is a prime number
14 equals 2 * 7
15 equals 3 * 5
16 equals 2 * 8
17 is a prime number
18 equals 2 * 9
19 is a prime number


